[{"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\index.js":"1","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\App.js":"2","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\index.js":"3","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Navbar\\Navbar.js":"4","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Home\\Home.js":"5","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Auth.js":"6","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\auth.js":"7","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\posts.js":"8","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Navbar\\styles.js":"9","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Icon.js":"10","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Input.js":"11","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\styles.js":"12","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\constants\\actionTypes.js":"13","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Posts.js":"14","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\actions\\auth.js":"15","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Form\\Form.js":"16","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\actions\\posts.js":"17","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Form\\styles.js":"18","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\styles.js":"19","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\api\\index.js":"20","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Post\\Post.js":"21","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Post\\styles.js":"22"},{"size":682,"mtime":1615099861934,"results":"23","hashOfConfig":"24"},{"size":848,"mtime":1615099861921,"results":"25","hashOfConfig":"24"},{"size":163,"mtime":1615099861936,"results":"26","hashOfConfig":"24"},{"size":2075,"mtime":1615099861928,"results":"27","hashOfConfig":"24"},{"size":1463,"mtime":1615445565609,"results":"28","hashOfConfig":"24"},{"size":5813,"mtime":1615303969085,"results":"29","hashOfConfig":"24"},{"size":638,"mtime":1615303950743,"results":"30","hashOfConfig":"24"},{"size":719,"mtime":1615099861936,"results":"31","hashOfConfig":"24"},{"size":953,"mtime":1615099861929,"results":"32","hashOfConfig":"24"},{"size":518,"mtime":1615099861924,"results":"33","hashOfConfig":"24"},{"size":1219,"mtime":1615271729307,"results":"34","hashOfConfig":"24"},{"size":788,"mtime":1615216060105,"results":"35","hashOfConfig":"24"},{"size":262,"mtime":1615202213094,"results":"36","hashOfConfig":"24"},{"size":910,"mtime":1615099861932,"results":"37","hashOfConfig":"24"},{"size":840,"mtime":1615269751488,"results":"38","hashOfConfig":"24"},{"size":3464,"mtime":1615380245155,"results":"39","hashOfConfig":"24"},{"size":1430,"mtime":1615099861922,"results":"40","hashOfConfig":"24"},{"size":457,"mtime":1615380227524,"results":"41","hashOfConfig":"24"},{"size":278,"mtime":1615099861932,"results":"42","hashOfConfig":"24"},{"size":929,"mtime":1615213987368,"results":"43","hashOfConfig":"24"},{"size":5108,"mtime":1615263738080,"results":"44","hashOfConfig":"24"},{"size":1078,"mtime":1615267790674,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"nb5hm9",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\index.js",[],["98","99"],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\App.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\index.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Navbar\\Navbar.js",["100","101"],"import React, { useState, useEffect } from 'react';\r\nimport { AppBar,Typography, Toolbar, Avatar, Button } from '@material-ui/core';\r\nimport { Link, useHistory, useLocation } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport decode from 'jwt-decode';\r\nimport postimg from '../../images/post.png';\r\nimport * as actionType from '../../constants/actionTypes';\r\nimport useStyles from './styles';\r\n\r\nconst Navbar = () => {\r\n  const [user, setUser] = useState(JSON.parse(localStorage.getItem('profile')));\r\n\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  \r\n  useEffect(() => {\r\n\r\n    const token = user?.token;\r\n    //JWT...later \r\n    setUser(JSON.parse(localStorage.getItem('profile')));\r\n\r\n\r\n    if(token)\r\n    {\r\n      const decodedToken = decode(token);\r\n\r\n      if(decodedToken.exp * 1000 <new Date().getTime())  \r\n      logout();\r\n\r\n    }\r\n  },[location]);\r\n\r\n  const logout = () => {\r\n    dispatch({type: 'LOGOUT'});\r\n    history.push('/');\r\n    setUser(null);\r\n  };\r\n\r\n \r\n  return (\r\n    <AppBar className={classes.appBar} position=\"fixed\" color=\"secondary\" >\r\n      <div className={classes.brandContainer} >\r\n      <Link  to=\"/\" className={classes.nav} >\r\n      <img className={classes.image} src={postimg} alt=\"icon\" height=\"64\" />\r\n \r\n      </Link>\r\n      </div>\r\n      <Toolbar className={classes.toolbar}>\r\n        {user?.result ? (\r\n          <div className={classes.profile}>\r\n            <Avatar className={classes.purple} alt={user?.result.name} src={user?.result.imageUrl}>{user?.result.name.charAt(0)}</Avatar>\r\n            <Typography className={classes.userName} variant=\"h6\">{user?.result.name}</Typography>\r\n            <Button variant=\"contained\" className={classes.logout} color=\"secondary\" onClick={logout}>Logout</Button>\r\n          </div>\r\n        ) : (\r\n          <Button component={Link} to=\"/auth\" variant=\"contained\" color=\"primary\">Sign In</Button>\r\n        )}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Home\\Home.js",["102","103","104","105","106","107","108","109","110"],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Auth.js",["111","112","113","114","115"],"import React, { useState,useEffect} from 'react';\r\nimport { useDispatch ,useSelector} from 'react-redux';\r\nimport { Avatar, Button, Paper,Box,  Grid, TextField,CircularProgress, Typography, Container } from '@material-ui/core';\r\n \r\nimport {GoogleLogin} from \"react-google-login\";\r\nimport { Switch, useHistory } from 'react-router-dom';\r\nimport useStyles from './styles';\r\nimport {signup, signin } from '../../actions/auth';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Input from './Input';\r\nimport Icon from './Icon';\r\n\r\n\r\nconst initialState = {firstName: '',lastName: '', email:'', password:'', confirmPassword:''};\r\n\r\nconst Auth = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    const [showPassword,setShowPassword] = useState(false);\r\n    const [formdata,setFormData] = useState(initialState);\r\n    const [isSignup, setIsSignup] = useState(false);\r\n    const [loginError, setLoginError] = useState(false);\r\n    const [errormessage,setErrormessage] = useState('');\r\n\r\n\r\n    const [loading,setLoading] = useState(false);\r\n\r\n    const isLoginError = useSelector(state => state.auth.errors)\r\n\r\n     \r\n    useEffect(() => {\r\n\r\n        if (isLoginError) \r\n        {\r\n\r\n            console.log(isLoginError);\r\n        setLoginError(true);\r\n        setErrormessage(isLoginError.data.message);\r\n        }\r\n      }, [isLoginError]);\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        //setLoading(true);\r\n        if(isSignup) {\r\n            dispatch(signup(formdata,history))\r\n        }\r\n        else {\r\n            dispatch(signin(formdata,history)) \r\n     \r\n        }\r\n\r\n        //console.log(formdata);\r\n        //console.log(isLoginError);\r\n    };\r\n   \r\n    \r\n    const handleChange = (e) => {\r\n        setLoginError (false);  \r\n        setErrormessage('');\r\n\r\n        setFormData({...formdata, [e.target.name]: e.target.value});\r\n    };\r\n\r\n    const handleShowPassword = () =>setShowPassword(\r\n        (prevShowPassword) => !prevShowPassword\r\n    );\r\n\r\n    const switchMode = () => {\r\n        setIsSignup((prevIsSignup) => !prevIsSignup);\r\n        setShowPassword(false);\r\n    }\r\n\r\n    const googleSuccess = async (res) => {\r\n      const result = res?.profileObj;\r\n      const token = res?.tokenId;\r\n      try{\r\n        dispatch({ type: 'AUTH', data:{result,token}});\r\n        history.push('/');\r\n      }\r\n      catch(error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n\r\n    const googleFailure = () => {\r\n        console.log(\"google login was failed, plz try again later.\")\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Box mt={20} >\r\n        <Container component=\"main\" maxWidth=\"xs\"  >\r\n            <Paper className={classes.paper} elevation={3}>\r\n            <Avatar className={classes.avatar}>\r\n             <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography variant=\"h5\">{isSignup ? 'Sign Up' : 'Sign In'}</Typography>\r\n            <form className={classes.form}     onSubmit={handleSubmit}   >\r\n                <Grid spacing ={3} container >\r\n                    {\r\n                    isSignup && (\r\n                        <>\r\n                        <Input name=\"firstName\" label=\"First Name\" handleChange={handleChange} autoFocus half />\r\n                        <Input name=\"lastName\" label=\"Last Name\" handleChange={handleChange} half />  \r\n                        </>\r\n                    )}\r\n\r\n                        <Input loginError = {loginError}   name=\"email\" label=\"Email Address\" handleChange={handleChange} type=\"email\" />\r\n                        <Input   loginError = {loginError}   errormessage = {errormessage}  \r\n                         name=\"password\" label=\"Password\" handleChange={handleChange} type={showPassword ? 'text' : 'password'} handleShowPassword={handleShowPassword} />\r\n                        { isSignup && <Input name=\"confirmPassword\" loginError = {loginError}   errormessage = {errormessage} label=\"Repeat Password\" handleChange={handleChange} type=\"password\" /> }\r\n                       \r\n                         \r\n                </Grid>\r\n            \r\n                <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>\r\n                    { isSignup ? 'Sign Up' : 'Sign In' }\r\n                </Button>\r\n               {/*  {loading && <CircularProgress size={24} className={classes.buttonProgress} />} */}\r\n                <GoogleLogin \r\n                    clientId=\"1095827748467-b1l72q3hc2ib39o1iulpdemi5r6h6spg.apps.googleusercontent.com\"\r\n                    render={(rednderProps) => (\r\n                        <Button \r\n                        className={classes.googleButton} color=\"primary\" \r\n                        fullWidth onClick={rednderProps.onClick} \r\n                        disabled = {rednderProps.disabled} \r\n                        variant=\"contained\" \r\n                        startIcon={<Icon />}\r\n                        > \r\n                        Google Sign In\r\n                        </Button>\r\n                 \r\n                    )}\r\n                    onSuccess={googleSuccess}\r\n                    onFailure={googleFailure}\r\n                    cookiePolicy=\"single_host_origin\"\r\n                />\r\n                <Grid container justify=\"center\">\r\n                        <Grid item>\r\n                            <Button onClick={switchMode} disableElevation color=\"secondary\" fullWidth> \r\n                            {isSignup ? 'Alrealdy have an account? Sign In' : \"Don't have an account? Sign Up Now\"}\r\n                            </Button>\r\n                        </Grid>\r\n                </Grid>\r\n            </form>\r\n            </Paper>        \r\n        </Container>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n\r\n\r\n\r\n","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\auth.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\reducers\\posts.js",["116"],"import {FETCH_ALL,CREATE,UPDATE,DELETE, LIKE} from '../constants/actionTypes';\r\n\r\n\r\nexport default (posts=[] , action) => {\r\n\r\n    switch (action.type) {\r\n        case FETCH_ALL:\r\n            return action.payload;\r\n        \r\n        case CREATE:\r\n            return [...posts,action.payload];\r\n\r\n        case UPDATE:\r\n            return  posts.map((post) => post._id === action.payload._id ? action.payload : post);\r\n            \r\n        case LIKE:\r\n            return posts.map((post) => (post._id === action.payload._id ? action.payload : post));\r\n        \r\n        case DELETE:\r\n        return  posts.filter((post) => post._id !== action.payload);\r\n\r\n        default:\r\n        return   posts;  \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Navbar\\styles.js",["117"],"import { makeStyles } from '@material-ui/core/styles';\r\nimport { deepPurple } from '@material-ui/core/colors';\r\n\r\nexport default makeStyles((theme) => ({\r\n  appBar: {\r\n    borderRadius: 15,\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    padding: '10px 50px',\r\n    backgroundColor: 'transparent',\r\n    boxShadow: 'none',\r\n  },\r\n  nav: {\r\n    display: 'flex',\r\n    textDecoration: 'none',\r\n  },\r\n\r\n  heading: {\r\n     \r\n     \r\n    alignSelf: 'center',\r\n    \r\n  },\r\n  image: {\r\n    marginLeft: '15px',\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n    width: '400px',\r\n  },\r\n  profile: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    width: '400px',\r\n  },\r\n  userName: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  brandContainer: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    alignSelf: 'center',\r\n  },\r\n \r\n}));","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Icon.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\Input.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Auth\\styles.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\constants\\actionTypes.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Posts.js",["118","119"],"import React,{useState} from 'react';\r\nimport Post from './Post/Post';\r\nimport {Grow ,Grid, CircularProgress } from '@material-ui/core';\r\nimport useStyles from './styles';\r\nimport {useSelector} from 'react-redux';\r\n \r\n\r\nconst Posts= ({setCurrentId} ) => {\r\n\r\n    const posts = useSelector((state) =>  state.posts);\r\n\r\n    console.log(posts);\r\n\r\n    const classes = useStyles();\r\n   \r\n  \r\n    return (\r\n        !posts.length ? <CircularProgress /> : (\r\n            \r\n        \r\n            <Grid  className={classes.container} container alignItems=\"stretch\" spacing={3}>\r\n              {posts.map((post) => (\r\n   \r\n                <Grid  key={post._id} item xs={12} sm={6} md={6}>\r\n                  <Post post={post} setCurrentId = {setCurrentId}   />\r\n                </Grid>\r\n                 \r\n              ))}\r\n            </Grid> \r\n           \r\n             \r\n          )\r\n    )\r\n}\r\n\r\nexport default Posts","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\actions\\auth.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Form\\Form.js",["120"],"import React, { useState, useEffect } from 'react';\r\nimport { TextField, Button, Typography, Paper } from '@material-ui/core';\r\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport FileBase from 'react-file-base64';\r\nimport useStyles from './styles';\r\nimport { createPost ,updatePost} from '../../actions/posts';\r\nimport {  useSnackbar } from 'notistack';\r\n\r\nconst Form= ({ currentId, setCurrentId }) => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n    const [postData, setPostData] = useState({ title: '', message: '', tags: '', selectedFile: '' });\r\n\r\n    const post = useSelector((state) => (currentId ? state.posts.find((message) => message._id === currentId) : null));\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useDispatch(); \r\n    const user = JSON.parse(localStorage.getItem('profile'));\r\n\r\n     \r\n    useEffect(() => {\r\n      if (post) setPostData(post);\r\n    }, [post]);\r\n\r\n     \r\n\r\n    const handleSubmit = async (e) => {\r\n      e.preventDefault();\r\n  \r\n       \r\n      if (currentId === null) {\r\n        dispatch(createPost({...postData, creatorname: user?.result?.name}));\r\n        clear();\r\n        // variant could be success, error, warning, info, or default\r\n        enqueueSnackbar('Post Created Successful !', { variant: 'success'});\r\n      } else {\r\n        dispatch(updatePost(currentId, {...postData, creatorname: user?.result?.name}));\r\n        clear(); \r\n        enqueueSnackbar('Post Updated Successful !', { variant: 'info'});\r\n      }\r\n    };\r\n\r\n\r\n    const clear = () => {\r\n      setCurrentId(null);\r\n      setPostData({ title: '', message: '', tags: '', selectedFile: '' });\r\n    };\r\n \r\n\r\n    if(!user?.result?.name) {\r\n\r\n      return(\r\n        <Paper className={classes.paper}>\r\n          <Typography variant=\"h6\" align=\"center\">\r\n            Please sign in to sahre your posts!\r\n          </Typography>\r\n        </Paper>\r\n          )\r\n    }\r\n    //GET the post id to the form\r\n    return (\r\n        <Paper className={classes.paper}>\r\n        <form autoComplete=\"off\"  className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n          <Typography variant=\"h6\">{ currentId ? 'Editing' :'Creating'} a Post</Typography>\r\n          <TextField name=\"title\" variant=\"outlined\" required label=\"Title\" fullWidth value={postData.title} onChange={(e) => setPostData({ ...postData, title: e.target.value })} />\r\n          <TextField name=\"message\" variant=\"outlined\" required label=\"Message\" fullWidth multiline rows={4} value={postData.message} onChange={(e) => setPostData({ ...postData, message: e.target.value })} />\r\n          <TextField name=\"tags\" variant=\"outlined\" required label=\"Tags (coma separated)\" fullWidth value={postData.tags} onChange={(e) => setPostData({ ...postData, tags: e.target.value.split(',') })} />\r\n          <div className={classes.fileInput}>\r\n            <FileBase  required    type=\"file\"   multiple={false}  onDone={({ base64 }) => setPostData({ ...postData, selectedFile: base64 })} />        \r\n           \r\n            \r\n            </div>\r\n          <Button className={classes.buttonSubmit} variant=\"contained\" color=\"primary\" size=\"large\" type=\"submit\" fullWidth>Submit { currentId ? 'Editing' :'Creating'}</Button>\r\n          <Button variant=\"contained\" color=\"secondary\" size=\"small\" onClick={clear} fullWidth>ClearForm</Button>\r\n        </form>\r\n      </Paper>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","G:\\Xampp\\htdocs\\mern-gram\\client\\src\\actions\\posts.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Form\\styles.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\styles.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\api\\index.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Post\\Post.js",[],"G:\\Xampp\\htdocs\\mern-gram\\client\\src\\components\\Posts\\Post\\styles.js",["121","122","123"],"import { createMuiTheme, withStyles, makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\n \r\n\r\n\r\n\r\n\r\n\r\nexport default makeStyles({\r\n  media: {\r\n    height: 0,\r\n    paddingTop: '56.25%',\r\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\r\n    backgroundBlendMode: 'darken',\r\n  },\r\n  border: {\r\n    border: 'solid',\r\n  },\r\n  fullHeightCard: {\r\n    height: '100%',\r\n  },\r\n  card: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'space-between',\r\n    borderRadius: '15px',\r\n    height: '100%',\r\n    position: 'relative',\r\n  },\r\n  overlay: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    left: '20px',\r\n    color: 'white',\r\n  },\r\n  overlay2: {\r\n    position: 'absolute',\r\n    top: '20px',\r\n    right: '20px',\r\n    color: 'white',\r\n  },\r\n  grid: {\r\n    display: 'flex',\r\n  },\r\n  details: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    margin: '20px',\r\n  },\r\n  title: {\r\n    padding: '0 16px',\r\n  },\r\n  cardActions: {\r\n    padding: '0 16px 8px 16px',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n\r\n \r\n \r\n});\r\n ",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":7,"column":13,"nodeType":"130","messageId":"131","endLine":7,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":33,"column":5,"nodeType":"134","endLine":33,"endColumn":15,"suggestions":"135"},{"ruleId":"128","severity":1,"message":"136","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":14},{"ruleId":"128","severity":1,"message":"137","line":2,"column":33,"nodeType":"130","messageId":"131","endLine":2,"endColumn":37},{"ruleId":"128","severity":1,"message":"138","line":3,"column":10,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"128","severity":1,"message":"139","line":4,"column":10,"nodeType":"130","messageId":"131","endLine":4,"endColumn":23},{"ruleId":"128","severity":1,"message":"140","line":4,"column":25,"nodeType":"130","messageId":"131","endLine":4,"endColumn":31},{"ruleId":"128","severity":1,"message":"141","line":4,"column":33,"nodeType":"130","messageId":"131","endLine":4,"endColumn":38},{"ruleId":"128","severity":1,"message":"142","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":14},{"ruleId":"128","severity":1,"message":"143","line":10,"column":8,"nodeType":"130","messageId":"131","endLine":10,"endColumn":11},{"ruleId":"128","severity":1,"message":"144","line":11,"column":8,"nodeType":"130","messageId":"131","endLine":11,"endColumn":15},{"ruleId":"128","severity":1,"message":"145","line":3,"column":44,"nodeType":"130","messageId":"131","endLine":3,"endColumn":53},{"ruleId":"128","severity":1,"message":"146","line":3,"column":54,"nodeType":"130","messageId":"131","endLine":3,"endColumn":70},{"ruleId":"128","severity":1,"message":"140","line":6,"column":10,"nodeType":"130","messageId":"131","endLine":6,"endColumn":16},{"ruleId":"128","severity":1,"message":"147","line":27,"column":12,"nodeType":"130","messageId":"131","endLine":27,"endColumn":19},{"ruleId":"128","severity":1,"message":"148","line":27,"column":20,"nodeType":"130","messageId":"131","endLine":27,"endColumn":30},{"ruleId":"149","severity":1,"message":"150","line":4,"column":1,"nodeType":"151","endLine":30,"endColumn":2},{"ruleId":"128","severity":1,"message":"152","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":20},{"ruleId":"128","severity":1,"message":"153","line":1,"column":15,"nodeType":"130","messageId":"131","endLine":1,"endColumn":23},{"ruleId":"128","severity":1,"message":"137","line":3,"column":9,"nodeType":"130","messageId":"131","endLine":3,"endColumn":13},{"ruleId":"128","severity":1,"message":"154","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":23},{"ruleId":"128","severity":1,"message":"155","line":1,"column":10,"nodeType":"130","messageId":"131","endLine":1,"endColumn":24},{"ruleId":"128","severity":1,"message":"156","line":1,"column":26,"nodeType":"130","messageId":"131","endLine":1,"endColumn":36},{"ruleId":"128","severity":1,"message":"157","line":1,"column":50,"nodeType":"130","messageId":"131","endLine":1,"endColumn":63},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'actionType' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'logout' and 'user?.token'. Either include them or remove the dependency array.","ArrayExpression",["160"],"'Zoom' is defined but never used.","'Grow' is defined but never used.","'spacing' is defined but never used.","'BrowserRouter' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Navbar' is defined but never used.","'Fab' is defined but never used.","'AddIcon' is defined but never used.","'TextField' is defined but never used.","'CircularProgress' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'deepPurple' is defined but never used.","'useState' is defined but never used.","'CloudUploadIcon' is defined but never used.","'createMuiTheme' is defined but never used.","'withStyles' is defined but never used.","'ThemeProvider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},"Update the dependencies array to be: [location, logout, user?.token]",{"range":"163","text":"164"},[963,973],"[location, logout, user?.token]"]